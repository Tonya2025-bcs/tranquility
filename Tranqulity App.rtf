{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww13380\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!DOCTYPE html>\
<html lang="en">\
<head>\
    <meta charset="UTF-8">\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\
    <title>TRANQUILITY\'99 - Soothe the Nervous System, Feel the Calm</title>\
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>\
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>\
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>\
    <script src="https://cdn.tailwindcss.com"></script>\
    <style>\
        body \{ \
            margin: 0; \
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\
            background-color: #E8E2D5;\
        \}\
        .audio-controls \{\
            backdrop-filter: blur(10px);\
            background: rgba(255, 255, 255, 0.9);\
        \}\
    </style>\
</head>\
<body>\
    <div id="root"></div>\
\
    <script type="text/babel">\
        const \{ useState, useEffect, useRef \} = React;\
\
        const TranquilityApp = () => \{\
            const [isPlaying, setIsPlaying] = useState(false);\
            const [currentStep, setCurrentStep] = useState(0);\
            const [timeLeft, setTimeLeft] = useState(10 * 60);\
            const [selectedReset, setSelectedReset] = useState('grounding');\
            const [showSafetyReminder, setShowSafetyReminder] = useState(true);\
            const [voiceEnabled, setVoiceEnabled] = useState(true);\
            const [backgroundMusic, setBackgroundMusic] = useState('ocean');\
            const [voiceVolume, setVoiceVolume] = useState(0.8);\
            const [musicVolume, setMusicVolume] = useState(0.3);\
            const [showAudioControls, setShowAudioControls] = useState(false);\
\
            const speechRef = useRef(null);\
            const audioContextRef = useRef(null);\
            const oscillatorRef = useRef(null);\
\
            const resetTypes = \{\
                grounding: \{\
                    name: "Grounding & Safety",\
                    icon: "
\f1 \uc0\u55357 \u57057 \u65039 
\f0 ",\
                    steps: [\
                        "Notice you are safe in this moment. You have complete control.",\
                        "Feel your feet on the ground. Notice 5 things you can see.",\
                        "Take a breath only as deep as feels comfortable.",\
                        "Notice 4 things you can touch around you.",\
                        "Allow your nervous system to recognize safety.",\
                        "You can pause or stop anytime. You are in control."\
                    ]\
                \},\
                soothing: \{\
                    name: "Gentle Soothing",\
                    icon: "
\f1 \uc0\u55357 \u56474 
\f0 ",\
                    steps: [\
                        "Place your hands wherever feels comforting - heart, stomach, or lap.",\
                        "Breathe naturally. No need to change anything.",\
                        "Send yourself compassion for whatever you're feeling.",\
                        "Your nervous system is trying to protect you.",\
                        "You are worthy of comfort and care.",\
                        "Rest in this gentle awareness."\
                    ]\
                \},\
                activation: \{\
                    name: "Gentle Activation",\
                    icon: "
\f1 \uc0\u9889 
\f0 ",\
                    steps: [\
                        "Gently stretch your arms above your head if it feels good.",\
                        "Roll your shoulders slowly backward.",\
                        "Take up space in a way that feels safe.",\
                        "Notice your strength and resilience.",\
                        "You survived. You are here. You are enough.",\
                        "Feel your aliveness and presence."\
                    ]\
                \}\
            \};\
\
            const affirmations = \{\
                grounding: [\
                    "I am safe in this moment",\
                    "I trust my ability to care for myself",\
                    "My feelings are valid"\
                ],\
                soothing: [\
                    "I deserve compassion",\
                    "I am worthy of gentleness",\
                    "I honor my healing journey"\
                ],\
                activation: [\
                    "I am resilient and strong",\
                    "I have survived difficult things",\
                    "I choose to honor my experience"\
                ]\
            \};\
\
            const backgroundSounds = \{\
                ocean: \{ name: 'Ocean Waves', frequency: 220, type: 'sine' \},\
                forest: \{ name: 'Forest Sounds', frequency: 150, type: 'triangle' \},\
                rain: \{ name: 'Gentle Rain', frequency: 300, type: 'sawtooth' \},\
                silence: \{ name: 'Silence', frequency: 0, type: 'sine' \}\
            \};\
\
            // Text-to-Speech Function\
            const speakText = (text) => \{\
                if (!voiceEnabled) return;\
                \
                // Cancel any ongoing speech\
                window.speechSynthesis.cancel();\
                \
                const utterance = new SpeechSynthesisUtterance(text);\
                utterance.rate = 0.8; // Slower, more calming\
                utterance.pitch = 0.9; // Slightly lower pitch\
                utterance.volume = voiceVolume;\
                \
                // Try to use a calm voice if available\
                const voices = window.speechSynthesis.getVoices();\
                const calmVoice = voices.find(voice => \
                    voice.name.includes('Female') || \
                    voice.name.includes('Samantha') ||\
                    voice.name.includes('Karen') ||\
                    voice.lang.includes('en')\
                );\
                if (calmVoice) utterance.voice = calmVoice;\
                \
                window.speechSynthesis.speak(utterance);\
                speechRef.current = utterance;\
            \};\
\
            // Background Music Generator\
            const startBackgroundMusic = () => \{\
                if (backgroundMusic === 'silence') return;\
                \
                try \{\
                    const AudioContext = window.AudioContext || window.webkitAudioContext;\
                    audioContextRef.current = new AudioContext();\
                    \
                    const oscillator = audioContextRef.current.createOscillator();\
                    const gainNode = audioContextRef.current.createGain();\
                    \
                    const sound = backgroundSounds[backgroundMusic];\
                    oscillator.frequency.setValueAtTime(sound.frequency, audioContextRef.current.currentTime);\
                    oscillator.type = sound.type;\
                    \
                    // Create gentle, ambient effect\
                    gainNode.gain.setValueAtTime(0, audioContextRef.current.currentTime);\
                    gainNode.gain.linearRampToValueAtTime(musicVolume * 0.1, audioContextRef.current.currentTime + 2);\
                    \
                    // Add tremolo effect for ocean/rain\
                    if (backgroundMusic === 'ocean' || backgroundMusic === 'rain') \{\
                        const tremolo = audioContextRef.current.createOscillator();\
                        const tremoloGain = audioContextRef.current.createGain();\
                        tremolo.frequency.setValueAtTime(0.5, audioContextRef.current.currentTime);\
                        tremoloGain.gain.setValueAtTime(0.3, audioContextRef.current.currentTime);\
                        tremolo.connect(tremoloGain);\
                        tremoloGain.connect(gainNode.gain);\
                        tremolo.start();\
                    \}\
                    \
                    oscillator.connect(gainNode);\
                    gainNode.connect(audioContextRef.current.destination);\
                    oscillator.start();\
                    \
                    oscillatorRef.current = oscillator;\
                \} catch (error) \{\
                    console.log('Audio context not available');\
                \}\
            \};\
\
            const stopBackgroundMusic = () => \{\
                if (oscillatorRef.current) \{\
                    oscillatorRef.current.stop();\
                    oscillatorRef.current = null;\
                \}\
                if (audioContextRef.current) \{\
                    audioContextRef.current.close();\
                    audioContextRef.current = null;\
                \}\
            \};\
\
            useEffect(() => \{\
                let interval;\
                if (isPlaying && timeLeft > 0) \{\
                    interval = setInterval(() => \{\
                        setTimeLeft(timeLeft - 1);\
                    \}, 1000);\
                \} else if (timeLeft === 0) \{\
                    setIsPlaying(false);\
                    stopBackgroundMusic();\
                \}\
                return () => clearInterval(interval);\
            \}, [isPlaying, timeLeft]);\
\
            useEffect(() => \{\
                if (isPlaying) \{\
                    startBackgroundMusic();\
                \} else \{\
                    stopBackgroundMusic();\
                \}\
                return () => stopBackgroundMusic();\
            \}, [isPlaying, backgroundMusic, musicVolume]);\
\
            const togglePlay = () => \{\
                if (!isPlaying) \{\
                    speakText(`Starting $\{resetTypes[selectedReset].name\} session. $\{resetTypes[selectedReset].steps[currentStep]\}`);\
                \} else \{\
                    window.speechSynthesis.cancel();\
                \}\
                setIsPlaying(!isPlaying);\
            \};\
\
            const resetSession = () => \{\
                setIsPlaying(false);\
                setCurrentStep(0);\
                setTimeLeft(10 * 60);\
                window.speechSynthesis.cancel();\
                stopBackgroundMusic();\
            \};\
\
            const nextStep = () => \{\
                if (currentStep < resetTypes[selectedReset].steps.length - 1) \{\
                    const newStep = currentStep + 1;\
                    setCurrentStep(newStep);\
                    if (isPlaying) \{\
                        speakText(resetTypes[selectedReset].steps[newStep]);\
                    \}\
                \}\
            \};\
\
            const prevStep = () => \{\
                if (currentStep > 0) \{\
                    const newStep = currentStep - 1;\
                    setCurrentStep(newStep);\
                    if (isPlaying) \{\
                        speakText(resetTypes[selectedReset].steps[newStep]);\
                    \}\
                \}\
            \};\
\
            const formatTime = (seconds) => \{\
                const mins = Math.floor(seconds / 60);\
                const secs = seconds % 60;\
                return `$\{mins\}:$\{secs.toString().padStart(2, '0')\}`;\
            \};\
\
            const currentResetType = resetTypes[selectedReset];\
\
            const TranquilityLeaf = () => (\
                <svg \
                    className="w-10 h-12"\
                    viewBox="0 0 100 140" \
                    fill="none" \
                    xmlns="http://www.w3.org/2000/svg"\
                >\
                    <path\
                        d="M50 20 C 25 25, 15 45, 20 75 C 25 105, 45 125, 50 130 C 55 125, 75 105, 80 75 C 85 45, 75 25, 50 20 Z"\
                        fill="#2D5016"\
                    />\
                    <path\
                        d="M50 35 L50 115"\
                        stroke="#D4AF37"\
                        strokeWidth="3"\
                        strokeLinecap="round"\
                    />\
                </svg>\
            );\
\
            return (\
                <div className="max-w-md mx-auto min-h-screen p-6 relative" style=\{\{ backgroundColor: '#E8E2D5' \}\}>\
                    \{/* Audio Controls */\}\
                    <div className="fixed top-4 right-4 z-50">\
                        <button\
                            onClick=\{() => setShowAudioControls(!showAudioControls)\}\
                            className="w-12 h-12 rounded-full shadow-lg flex items-center justify-center text-xl audio-controls border"\
                            style=\{\{ borderColor: '#D4AF37' \}\}\
                        >\
                            
\f1 \uc0\u55356 \u57269 
\f0 \
                        </button>\
                        \
                        \{showAudioControls && (\
                            <div className="absolute top-14 right-0 w-64 p-4 rounded-2xl shadow-xl audio-controls border" style=\{\{ borderColor: '#D4AF37' \}\}>\
                                <h3 className="font-bold mb-3 text-center" style=\{\{ color: '#2D5016' \}\}>Audio Settings</h3>\
                                \
                                \{/* Voice Toggle */\}\
                                <div className="mb-4">\
                                    <label className="flex items-center space-x-2">\
                                        <input\
                                            type="checkbox"\
                                            checked=\{voiceEnabled\}\
                                            onChange=\{(e) => setVoiceEnabled(e.target.checked)\}\
                                            className="rounded"\
                                        />\
                                        <span className="text-sm" style=\{\{ color: '#2D5016' \}\}>Voice Guidance</span>\
                                    </label>\
                                    \{voiceEnabled && (\
                                        <input\
                                            type="range"\
                                            min="0"\
                                            max="1"\
                                            step="0.1"\
                                            value=\{voiceVolume\}\
                                            onChange=\{(e) => setVoiceVolume(parseFloat(e.target.value))\}\
                                            className="w-full mt-2"\
                                        />\
                                    )\}\
                                </div>\
\
                                \{/* Background Music */\}\
                                <div className="mb-4">\
                                    <label className="block text-sm mb-2" style=\{\{ color: '#2D5016' \}\}>Background</label>\
                                    <select\
                                        value=\{backgroundMusic\}\
                                        onChange=\{(e) => setBackgroundMusic(e.target.value)\}\
                                        className="w-full p-2 rounded-lg border text-sm"\
                                        style=\{\{ borderColor: '#D4AF37' \}\}\
                                    >\
                                        \{Object.entries(backgroundSounds).map(([key, sound]) => (\
                                            <option key=\{key\} value=\{key\}>\{sound.name\}</option>\
                                        ))\}\
                                    </select>\
                                    \{backgroundMusic !== 'silence' && (\
                                        <input\
                                            type="range"\
                                            min="0"\
                                            max="1"\
                                            step="0.1"\
                                            value=\{musicVolume\}\
                                            onChange=\{(e) => setMusicVolume(parseFloat(e.target.value))\}\
                                            className="w-full mt-2"\
                                        />\
                                    )\}\
                                </div>\
\
                                <button\
                                    onClick=\{() => setShowAudioControls(false)\}\
                                    className="w-full py-2 rounded-lg text-white text-sm font-semibold"\
                                    style=\{\{ backgroundColor: '#2D5016' \}\}\
                                >\
                                    Done\
                                </button>\
                            </div>\
                        )\}\
                    </div>\
\
                    \{/* Safety Notice */\}\
                    \{showSafetyReminder && (\
                        <div className="bg-white rounded-xl p-3 mb-4 shadow-sm border" style=\{\{ borderColor: '#D4AF37' \}\}>\
                            <div className="flex items-start space-x-2">\
                                <div className="p-1.5 rounded-lg" style=\{\{ backgroundColor: '#D4AF3720' \}\}>\
                                    <span className="text-sm">
\f1 \uc0\u55357 \u57057 \u65039 
\f0 </span>\
                                </div>\
                                <div>\
                                    <h3 className="font-semibold text-sm mb-0.5" style=\{\{ color: '#2D5016' \}\}>Your Safety Matters</h3>\
                                    <p className="text-xs leading-snug mb-2" style=\{\{ color: '#2D5016', opacity: 0.8 \}\}>\
                                        You can pause, skip, or stop at any time. Only do what feels safe.\
                                    </p>\
                                    <button \
                                        onClick=\{() => setShowSafetyReminder(false)\}\
                                        className="text-white text-xs font-semibold px-3 py-1 rounded-full hover:opacity-90 transition-all duration-300"\
                                        style=\{\{ backgroundColor: '#2D5016' \}\}\
                                    >\
                                        Got it 
\f2 \uc0\u10003 
\f0 \
                                    </button>\
                                </div>\
                            </div>\
                        </div>\
                    )\}\
\
                    \{/* Header with Logo */\}\
                    <div className="text-center mb-12">\
                        <div className="relative flex items-center justify-center mb-6">\
                            <div className="relative">\
                                <h1 className="text-5xl font-black tracking-wider" style=\{\{ color: '#2D5016' \}\}>\
                                    TRANQUILITY<span className="text-2xl align-top ml-1" style=\{\{ color: '#D4AF37' \}\}>\'99</span>\
                                </h1>\
                                <div className="absolute -top-10 right-8" style=\{\{ transform: 'rotate(25deg)' \}\}>\
                                    <TranquilityLeaf />\
                                </div>\
                            </div>\
                        </div>\
                        <div className="w-40 h-1.5 mx-auto mb-3 rounded-full shadow-lg" style=\{\{ \
                            background: 'linear-gradient(90deg, #D4AF37 0%, #2D5016 50%, #D4AF37 100%)',\
                            boxShadow: '0 0 10px rgba(212, 175, 55, 0.4)'\
                        \}\}></div>\
                        <p className="text-lg font-medium" style=\{\{ color: '#2D5016', opacity: 0.7 \}\}>Soothe the Nervous System, Feel the Calm.</p>\
                    </div>\
\
                    \{/* Reset Type Selection */\}\
                    <div className="mb-12">\
                        <p className="font-bold mb-6 text-center text-xl" style=\{\{ color: '#2D5016' \}\}>Choose your reset type:</p>\
                        <div className="space-y-5">\
                            \{Object.entries(resetTypes).map(([key, reset]) => (\
                                <button\
                                    key=\{key\}\
                                    onClick=\{() => setSelectedReset(key)\}\
                                    className=\{`w-full p-6 rounded-3xl border-2 transition-all duration-300 transform hover:scale-[1.02] shadow-md hover:shadow-lg $\{\
                                        selectedReset === key ? 'text-white shadow-xl' : 'hover:shadow-lg'\
                                    \}`\}\
                                    style=\{\{\
                                        backgroundColor: selectedReset === key ? '#2D5016' : 'white',\
                                        borderColor: selectedReset === key ? '#D4AF37' : '#D4AF3780',\
                                        color: selectedReset === key ? 'white' : '#2D5016',\
                                        boxShadow: selectedReset === key \
                                            ? '0 8px 25px rgba(45, 80, 22, 0.3)' \
                                            : '0 4px 15px rgba(212, 175, 55, 0.15)'\
                                    \}\}\
                                >\
                                    <div className="flex items-center space-x-5">\
                                        <div \
                                            className="p-4 rounded-2xl transition-all duration-300 shadow-inner text-2xl"\
                                            style=\{\{\
                                                backgroundColor: selectedReset === key ? '#D4AF3750' : '#2D501620'\
                                            \}\}\
                                        >\
                                            \{reset.icon\}\
                                        </div>\
                                        <span className="font-bold text-xl">\{reset.name\}</span>\
                                    </div>\
                                </button>\
                            ))\}\
                        </div>\
                    </div>\
\
                    \{/* Timer */\}\
                    <div className="text-center mb-12">\
                        <div className="text-7xl font-black mb-6" style=\{\{ color: '#2D5016' \}\}>\
                            \{formatTime(timeLeft)\}\
                        </div>\
                        <div className="w-full bg-white rounded-full h-5 overflow-hidden shadow-inner border-2" style=\{\{ borderColor: '#D4AF37' \}\}>\
                            <div \
                                className="h-5 rounded-full transition-all duration-500"\
                                style=\{\{ \
                                    background: `linear-gradient(90deg, #2D5016 0%, #D4AF37 50%, #2D5016 100%)`,\
                                    width: `$\{((10 * 60 - timeLeft) / (10 * 60)) * 100\}%`,\
                                    boxShadow: '0 0 15px rgba(212, 175, 55, 0.6)'\
                                \}\}\
                            />\
                        </div>\
                    </div>\
\
                    \{/* Current Step */\}\
                    <div className="bg-white rounded-3xl p-8 mb-12 shadow-xl border-2" style=\{\{ borderColor: '#D4AF37' \}\}>\
                        <div className="text-center mb-8">\
                            <div className="flex justify-center mb-4">\
                                <span \
                                    className="inline-block px-8 py-3 rounded-2xl text-sm font-bold text-white shadow-lg"\
                                    style=\{\{ \
                                        backgroundColor: '#2D5016',\
                                        boxShadow: '0 6px 20px rgba(212, 175, 55, 0.4)'\
                                    \}\}\
                                >\
                                    Step \{currentStep + 1\} of \{currentResetType.steps.length\}\
                                </span>\
                            </div>\
                        </div>\
                        <p className="text-2xl leading-relaxed text-center mb-10 font-medium" style=\{\{ color: '#2D5016' \}\}>\
                            \{currentResetType.steps[currentStep]\}\
                        </p>\
                        \
                        \{/* Step Navigation */\}\
                        <div className="flex justify-between items-center">\
                            <button\
                                onClick=\{prevStep\}\
                                disabled=\{currentStep === 0\}\
                                className="px-8 py-4 text-sm rounded-2xl font-bold disabled:opacity-30 hover:opacity-80 transition-all duration-300 shadow-sm text-white"\
                                style=\{\{ backgroundColor: '#4A6741' \}\}\
                            >\
                                
\f2 \uc0\u8592 
\f0  Previous\
                            </button>\
                            <div className="flex space-x-3">\
                                \{currentResetType.steps.map((_, index) => (\
                                    <div\
                                        key=\{index\}\
                                        className="w-3 h-3 rounded-full transition-all duration-500"\
                                        style=\{\{ \
                                            backgroundColor: index === currentStep ? '#D4AF37' : '#4A674160',\
                                            boxShadow: index === currentStep ? '0 0 12px rgba(212, 175, 55, 0.8)' : 'none'\
                                        \}\}\
                                    />\
                                ))\}\
                            </div>\
                            <button\
                                onClick=\{nextStep\}\
                                disabled=\{currentStep === currentResetType.steps.length - 1\}\
                                className="px-8 py-4 text-sm rounded-2xl font-bold disabled:opacity-30 hover:opacity-80 transition-all duration-300 shadow-sm text-white"\
                                style=\{\{ backgroundColor: '#4A6741' \}\}\
                            >\
                                Next 
\f2 \uc0\u8594 
\f0 \
                            </button>\
                        </div>\
                    </div>\
\
                    \{/* Controls */\}\
                    <div className="flex justify-center space-x-6 mb-12">\
                        <button\
                            onClick=\{togglePlay\}\
                            className="flex items-center space-x-4 px-12 py-5 rounded-3xl text-white font-black text-xl hover:opacity-90 transition-all duration-300 transform hover:scale-105 shadow-xl"\
                            style=\{\{ \
                                backgroundColor: '#2D5016',\
                                boxShadow: '0 10px 30px rgba(212, 175, 55, 0.4)'\
                            \}\}\
                        >\
                            <span className="text-2xl">\{isPlaying ? '
\f1 \uc0\u9208 \u65039 
\f0 ' : '
\f1 \uc0\u9654 \u65039 
\f0 '\}</span>\
                            <span>\{isPlaying ? 'Pause' : 'Start'\}</span>\
                        </button>\
                        <button\
                            onClick=\{resetSession\}\
                            className="flex items-center space-x-4 px-12 py-5 bg-white rounded-3xl hover:opacity-90 transition-all duration-300 transform hover:scale-105 border-2 font-black text-xl shadow-xl"\
                            style=\{\{ \
                                borderColor: '#D4AF37',\
                                color: '#2D5016'\
                            \}\}\
                        >\
                            <span className="text-2xl">
\f1 \uc0\u55357 \u56580 
\f0 </span>\
                            <span>Reset</span>\
                        </button>\
                    </div>\
\
                    \{/* Affirmations */\}\
                    <div className="bg-white rounded-3xl p-8 shadow-xl border-2" style=\{\{ borderColor: '#D4AF37' \}\}>\
                        <h3 className="font-black mb-8 text-center text-2xl" style=\{\{ color: '#2D5016' \}\}>Gentle Reminders</h3>\
                        <div className="space-y-6">\
                            \{affirmations[selectedReset].map((affirmation, index) => (\
                                <div \
                                    key=\{index\} \
                                    className="flex items-center space-x-5 p-5 rounded-2xl border"\
                                    style=\{\{ \
                                        backgroundColor: '#D4AF3730',\
                                        borderColor: '#D4AF3760'\
                                    \}\}\
                                >\
                                    <span className="text-2xl">
\f1 \uc0\u55356 \u57151 
\f0 </span>\
                                    <span className="font-semibold italic text-lg" style=\{\{ color: '#2D5016' \}\}>\{affirmation\}</span>\
                                </div>\
                            ))\}\
                        </div>\
                    </div>\
\
                    \{/* Footer */\}\
                    <div className="mt-12 text-center text-sm space-y-3" style=\{\{ color: '#2D5016', opacity: 0.6 \}\}>\
                        <p>This is not a substitute for professional mental health care.</p>\
                        <p>If you're in crisis, please reach out to a mental health professional.</p>\
                        <div className="w-20 h-0.5 mx-auto my-4 rounded-full" style=\{\{ \
                            background: 'linear-gradient(90deg, #D4AF37 0%, #2D5016 50%, #D4AF37 100%)'\
                        \}\}></div>\
                        <p className="font-bold" style=\{\{ color: '#2D5016' \}\}>\'a9 2025 Tranquility\'99. All rights reserved.</p>\
                    </div>\
                </div>\
            );\
        \};\
\
        ReactDOM.render(<TranquilityApp />, document.getElementById('root'));\
    </script>\
</body>\
</html>}